class Math{
    static Array bitArray;

    function void init(){
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        return ;
    }

    function int abs(int x){
        if(x<0){
            return -x;
        }
        return x;
    }

    function int max(int x,int y){
        if(x>y){
            return x;
        }
        return y;
    }

    function int min(int x,int y){
        if(x<y){
            return x;
        }
        return y;
    }

    function int multiply(int x,int y){
        var int sum, i, mask;
        let i = 0;
        let mask = 1;
        while(i < 16){
            if(y&mask){
                let sum = sum + x;
            }
            let x = x + x;
            let mask = mask +mask;
            let i = i + 1;
        }
        return sum;
    }

    function int divide(int x,int y){
        var int res, absx, absy, sign, signx, signy, q;
        if(y=0){
            do Sys.error(3);
        }
        let absx = Math.abs(x);
        let absy = Math.abs(y);
        if(absy>absx) {
            return 0;
        }
        let signx=1;
        let signy=1;
        if(x<0){
            let signx=-1;
        }
        if(y<0){
            let signy=-1;
        }
        let sign = signx * signy;

        let q = Math.divide(x,2*y);
        if((x-2*q*y)<y){
            let res = 2*q;
        }
        else{
            let res = 2*q+1;
        }
        return res*sign;
    }

    function int sqrt(int x){
        var int res, r, temp, tempTwo;
        if(x<0){
            do Sys.error(4);
            return 0;
        }

        let res = 0;
        let r = 7;

        while (~(r < 0)) {
            let temp = res + bitArray[r];
            let tempTwo = temp * temp;

            if (~(tempTwo > x) & (tempTwo > 0)) {
                let res = temp;
            }
            let r = r - 1;
        }
        return res;
    
    }

}